# Adapted from Makefile.stm32f103

# Default to STM32F103CB
#SUBTARGET = CB


### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm/
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### ARM CMSIS Library ###
CONTIKI_CPU_ARM_CMSIS=$(CONTIKI_CPU_ARM)/cmsis

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/lpc1768

### NXP LPC17xx driver ###
CONTIKI_CPU_NXP_DRIVERS=$(CONTIKI_CPU)/lpc17xx_drivers

#DBG_IO=$(CONTIKI_CPU_ARM_COMMON)/dbg-io

### Define the source files we have in the LPC1768 port

CONTIKI_CPU_DIRS = . ../common/dbg-io ../common/usb 

#STM32F103     = clock.c debug-uart.c # interrupt-utils.c newlib-syscalls.c sys-interrupt.c rtimer-arch.c rtimer-arch-interrupt.c uip-log.c

LPC1768     = clock.c startup_LPC1768.c system_LPC1768.c

# SYSAPPS = codeprop-otf.c
# APPDIRS += $(CONTIKI)/cpu/at91sam7s/loader

# ELFLOADER = elfloader-otf.c elfloader-arm.c symtab.c cfs-ram.c

include $(CONTIKI_CPU_ARM_COMMON)/usb/Makefile.usb

include $(CONTIKI_CPU_ARM_COMMON)/SD-card/Makefile.sdcard

#TARGETLIBS = random.c dbg-printf.c dbg-puts.c dbg-putchar.c dbg-sprintf.c dbg-snprintf.c strformat.c

CONTIKI_TARGET_SOURCEFILES += $(LPC1768) $(CONTIKI_CPU_ARM_CMSIS) \
				$(CONTIKI_CPU_NXP_DRIVERS) $(UIPDRIVERS) 

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)


THREADS =

### Compiler definitions
CC       = arm-non-eabi-gcc
LD       = arm-non-eabi-ld
AS       = arm-non-eabi-as
AR       = arm-non-eabi-ar
NM       = arm-non-eabi-nm
OBJCOPY  = arm-non-eabi-objcopy
STRIP    = arm-non-eabi-strip

XSLTPROC=xsltproc

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

LINKERSCRIPT = $(CONTIKI_CPU)/LPC1768.ld

STARTUP=${addprefix $(OBJECTDIR)/,startup-LPC1768.o}

# JTAG program upload
#OPENOCD	 = openocd
#OPENOCD_DIR = $(CONTIKI_CPU_ARM)/openocd/ 
#OPENOCD_CFG = arm7_wig.cfg

# USB program upload
#SAMIAM=Sam_I_Am
#SAMIAM_TTY=/dev/ttyACM0

# Use OpenOCD by default
#PROG=openocd

#ARCH_FLAGS= -march=armv7-m -mthumb
ARCH_FLAGS= -mthumb -mcpu=cortex-m3

CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) \
	   -I$(CONTIKI_CPU_ARM_COMMON)/dbg-io \
	   -I$(CONTIKI_CPU_ARM_CMSIS) \
	   -I$(CONTIKI_CPU_NXP_DRIVERS) \
           -I$(CONTIKI)/platform/$(TARGET) \
           ${addprefix -I,$(APPDIRS)} \
           -DWITH_UIP -DWITH_ASCII -DMCK=$(MCK) \
           -Wall $(ARCH_FLAGS) -g -D SUBTARGET=$(SUBTARGET)

CFLAGS  += $(CFLAGSNO) -O -DRUN_AS_SYSTEM -DROM_RUN
LDFLAGS += -L $(CONTIKI_CPU) -T $(LINKERSCRIPT) -nostartfiles \
		-Wl,-Map -Xlinker contiki-$(TARGET).map

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__




### Setup directory search path for source files

CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_O=yes

%.o: %.c
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@


CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
%.o: %.S
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.S
	$(CC) $(CFLAGS) $< -c  -o $@


CUSTOM_RULE_C_TO_CO=yes

%.co: %.c
	$(CC) $(CFLAGS) $< -c -o $@

CUSTOM_RULE_C_TO_CE=yes

%.ce: %.o
	$(LD) $(LDFLAGS) --relocatable -T $(CONTIKI_CPU)/merge-rodata.ld $< -o $@
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

CUSTOM_RULE_LINK=yes

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<

%-nosyms.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) # $(OBJECTDIR)/empty-symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)


%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

%.bin: %.$(TARGET)
	$(OBJCOPY) -O binary $< $@
 
.PHONY: symbols.c
ifdef CORE
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) $(OBJECTDIR)/symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)

symbols.c: $(CORE)
	$(NM) $< | awk -f $(CONTIKI_CPU)/builtins.awk -f ../../tools/mknmlist > symbols.c

else
%.$(TARGET): %-nosyms.$(TARGET)
	ln -sf $< $@
endif

empty-symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h



#ifeq ($(PROG),openocd)
#%.u: %.bin
#	# Clear lock bits
#	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) -c init -c "reset halt;sleep 250;flash probe 0;stm32x mass_erase 0; sleep 500;flash write_bank 0 $< 0;reset halt;resume;sleep 500;exit"
#else ifeq ($(PROG),samiam)
#%.u: %.ihex
#	# Clear lock bits
#	$(SAMIAM) "open $(SAMIAM_TTY) , writew 0xffffff64 5a000004"
#	$(SAMIAM) "open $(SAMIAM_TTY) , writew 0xffffff64 5a002004"
#	$(SAMIAM) "open $(SAMIAM_TTY) , flash $< , go"
#
#endif
#
#ocd_reset:
#	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) -c init -c "reset halt;resume" -c exit

# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
#$(OBJECTDIR)/elfloader.o: 
#	echo -n >$@

clean: clean_cpu

.PHONY: LPC1768_clean

clean_cpu:
	-rm -rf $(BUILTSRCDIR)

.PRECIOUS: %-nosyms.$(TARGET)
